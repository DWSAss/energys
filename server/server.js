const express = require("express");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const mysql = require("mysql2");
require("dotenv").config();
const path = require("path");

const app = express();
const port = process.env.PORT || 10001;

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.use(cors({ origin: "*" }));
app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üì• [${req.method}] ${req.url}`, req.body);
    next();
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connection = mysql.createConnection({
    host: process.env.DB_HOST || "localhost",
    user: process.env.DB_USER || "root",
    password: process.env.DB_PASSWORD || "",
    database: process.env.DB_NAME || "test_db",
    port: process.env.DB_PORT || 3306,
});

connection.connect((err) => {
    if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err);
        return;
    }
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
});

const JWT_SECRET = process.env.JWT_SECRET || "secret_key";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const token = req.header("Authorization")?.split(" ")[1];
    if (!token) {
        console.warn("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ");
        return res.status(403).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });
    }
    console.log("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:", token);
    jwt.verify(token, JWT_SECRET, (err, decoded) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", err.message);
            return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
        }
        console.log("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", decoded);
        req.user = decoded;
        next();
    });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const verifyAdmin = (req, res, next) => {
    if (req.user.isAdmin !== 1) {
        console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª—É`);
        return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" });
    }
    next();
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/register", (req, res) => {
    const { name, email, password } = req.body;
    console.log("üì© –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", { name, email });

    if (password.length < 8) {
        console.warn("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
        return res.status(400).json({ error: "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π" });
    }

    const checkQuery = "SELECT * FROM Holodka WHERE email = ?";
    connection.query(checkQuery, [email], (err, result) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        if (result.length > 0) {
            console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        const insertQuery = "INSERT INTO Holodka (name, email, password, isAdmin) VALUES (?, ?, ?, 0)";
        connection.query(insertQuery, [name, email, password], (err) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
                return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            }
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
            res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
        });
    });
});

// –õ–æ–≥–∏–Ω
app.post("/login", (req, res) => {
    const { email, password } = req.body;
    console.log("üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:", email);

    const query = "SELECT * FROM Holodka WHERE email = ?";
    connection.query(query, [email], (err, result) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        if (result.length === 0) {
            console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", email);
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const user = result[0];
        if (password !== user.password) {
            console.warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:", email);
            return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
        }

        const token = jwt.sign(
            { id: user.id, name: user.name, email: user.email, isAdmin: user.isAdmin },
            JWT_SECRET,
            { expiresIn: "6h" }
        );

        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:", email);
        res.status(200).json({ token });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get("/account", authenticateToken, (req, res) => {
    console.log(`üë§ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.user.id}`);

    const userId = req.user.id;
    const query = "SELECT id, name, email, isAdmin FROM Holodka WHERE id = ?";
    connection.query(query, [userId], (err, result) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        if (result.length === 0) {
            console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", userId);
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", result[0]);
        res.json(result[0]);
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});

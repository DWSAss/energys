const express = require("express");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const mysql = require("mysql2");
require("dotenv").config();
const path = require("path");

const app = express();
require('dotenv').config();
const port = process.env.PORT || 10001;
app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});


const JWT_SECRET = "secret_key"; 
// –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å process.env.JWT_SECRET

// Middleware
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const connection = mysql.createConnection({
    host: process.env.DB_HOST || "localhost",
    user: process.env.DB_USER || "root",
    password: process.env.DB_PASSWORD || "",
    database: process.env.DB_NAME || "test_db",
    port: process.env.DB_PORT || 3306,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
connection.connect((err) => {
    if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err);
        return;
    }
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const token = req.header("Authorization")?.split(" ")[1];
    if (!token) return res.status(403).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });

    jwt.verify(token, JWT_SECRET, (err, decoded) => {
        if (err) return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });

        req.user = decoded;
        next();
    });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (isAdmin === 1)
const verifyAdmin = (req, res, next) => {
    if (req.user.isAdmin !== 1) {
        return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" });
    }
    next();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (isAdmin === 1 –∏–ª–∏ isAdmin === 2)
const verifyUser = (req, res, next) => {
    if (![1, 2].includes(req.user.isAdmin)) {
        return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
    next();
};

// –ú–∞—Ä—à—Ä—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ë–ï–ó –•–ï–®–ò–†–û–í–ê–ù–ò–Ø –ü–ê–†–û–õ–Ø)
app.post("/register", (req, res) => {
    const { name, email, password } = req.body;

    if (password.length < 8) {
        return res.status(400).json({ error: "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const checkQuery = "SELECT * FROM Holodka WHERE email = ?";
    connection.query(checkQuery, [email], (err, result) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }

        if (result.length > 0) {
            return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–º (isAdmin = 0)
        const insertQuery = "INSERT INTO Holodka (name, email, password, isAdmin) VALUES (?, ?, ?, 0)";
        connection.query(insertQuery, [name, email, password], (err) => {
            if (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
                return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            }
            res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
        });
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –≤—Ö–æ–¥–∞ (–ª–æ–≥–∏–Ω–∞) –ë–ï–ó –•–ï–®–ò–†–û–í–ê–ù–ò–Ø
app.post("/login", (req, res) => {
    const { email, password } = req.body;

    const query = "SELECT * FROM Holodka WHERE email = ?";
    connection.query(query, [email], (err, result) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }

        if (result.length === 0) {
            return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const user = result[0];

        // –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π (–ë–ï–ó –•–ï–®–ò–†–û–í–ê–ù–ò–Ø)
        if (password !== user.password) {
            return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { id: user.id, name: user.name, email: user.email, isAdmin: user.isAdmin },
            JWT_SECRET,
            { expiresIn: "1h" }
        );

        res.status(200).json({ token });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
app.get("/account", authenticateToken, (req, res) => {
    const userId = req.user.id;

    const query = "SELECT id, name, email, isAdmin FROM Holodka WHERE id = ?";
    connection.query(query, [userId], (err, result) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }

        if (result.length === 0) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(result[0]);
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
app.get("/admin/users", authenticateToken, verifyAdmin, (req, res) => {
    const query = "SELECT id, name, email, isAdmin FROM Holodka";
    connection.query(query, (err, result) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        res.status(200).json(result);
    });
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
app.delete("/admin/users/:id", authenticateToken, verifyAdmin, (req, res) => {
    const { id } = req.params;
    const query = "DELETE FROM Holodka WHERE id = ?";
    connection.query(query, [id], (err) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
            return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        res.status(200).json({ success: true });
    });
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (isAdmin = 1 –∏–ª–∏ 2)
app.get("/user/profile", authenticateToken, verifyUser, (req, res) => {
    res.json({ message: "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", user: req.user });
});
